import datetime
import multiprocessing


def read_info(name: str):
    """
    Во время считывания добавлять каждую строку в список all_data.
    :param name: название файла
    """
    # Создавать локальный список all_data.
    all_data = []

    # Открывать файл name для чтения.
    with open(name, 'r') as f:
        while True:
            # Считывать информацию построчно (readline),
            line = f.readline()
            # пока считанная строка не окажется пустой.
            if line == '':
                break
    # Выводить или возвращать список all_data в функции не нужно.


def test_single_thread(filenames: list[str]):
    start = datetime.datetime.now()

    # Вызовите функцию read_info для каждого файла по очереди (линейно)
    for name in filenames:
        read_info(name)

    # и измерьте время выполнения и выведите его в консоль.
    stop = datetime.datetime.now()
    print(stop-start, "(линейный)")


def test_multiprocessing(filenames: list[str]):
    start = datetime.datetime.now()

    # Вызовите функцию read_info для каждого файла, используя многопроцессный подход:
    # контекстный менеджер with и объект Pool.
    pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())
    with pool as p:
        # Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов.
        p.map(read_info, filenames)
    stop = datetime.datetime.now()

    # Измерьте время выполнения и выведите его в консоль.
    print(stop-start, "(многопроцессный)")


def test():
    # Список названий файлов в соответствии с названиями файлов архива.
    filenames = [f'./file {number}.txt' for number in range(1, 5)]

    # Линейный вызов
    test_single_thread(filenames)

    # Многопроцессный вызов
    test_multiprocessing(filenames)

    """
    Вывод на консоль, 2 запуска (результаты могут отличаться):
    0:00:03.046163 (линейный)
    0:00:01.092300 (многопроцессный)
    """


if __name__ == '__main__':
    test()


"""
2023/12/15 00:00|Домашнее задание по теме "Многопроцессное программирование"
Если вы решали старую версию задачи, проверка будет производиться по ней.
Ссылка на старую версию тут.
Цель: понять разницу между линейным и многопроцессным подходом, выполнив операции обоими способами.

Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.
Подготовка:
Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.
https://drive.google.com/file/d/1YqBBelk2Pedfrg9GyXTGYvpa8Qb5CNd6/view?usp=sharing
Выполнение:
Создайте функцию read_info(name), где name - название файла. Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
Во время считывания добавлять каждую строку в список all_data.
Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект Pool. Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов. Измерьте время выполнения и выведите его в консоль.
Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности, предварительно закомментировав другой.

Пример результата выполнения программы:
Выполняемый код:
def read_info(name):
...
filenames = [f'./file {number}.txt' for number in range(1, 5)]

# Линейный вызов

# Многопроцессный

Вывод на консоль, 2 запуска (результаты могут отличаться):
0:00:03.046163 (линейный)
0:00:01.092300 (многопроцессный)

Примечания:
Используйте конструкцию if __name__ == '__main__' при многопроссном подходе.
Выводить или возвращать список all_data в функции не нужно. Можете сделать это, но кол-во информации в файлах достигает - 10^9 строк.
Файл module_10_5.py загрузите на ваш GitHub репозиторий. В решении пришлите ссылку на него.
"""
